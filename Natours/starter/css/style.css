/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
/* a reset to the padding and margin that a web navigator sometimes sets to some elements
   box-sizing: border-box == border and padding are included in the the width or height of the box*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* font set up through inheritance - some properties are inherited, like the font - */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;

    /* content padding */
}

/* polygons: https://bennettfeely.com/clippy/*/
.header {
    height: 95vh;

    /* 95% of the view port height */
    /* direction starting a light color from the right, and ending with darker tone on the bottom*/
    background-image: linear-gradient(
    to right bottom,
    rgba(126, 213, 111, 0.8),  /* light green */
    rgba(40, 180, 134, 0.8)),  /* dark green */
    url(../img/hero.jpg);

    /* a colored layer is defined on top of our hero image */
    background-size: cover;

    /* fit the image to the bounding box */
    background-position: top;

    /* fix the "top" of the image */
    /* x y, x y, x y, x y, x y square corners - starting from a clockwise direction in the top left corner- */
    position: relative;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

    /* note that the height of our 3ird point is dinamic*/
}

.logo-box {
    position: absolute;
    top: 40px;

    /* starting from parent with a relative position -header set to relative-  */
    left: 40px;
}

.logo {
    height: 35px;

    /* the width scales acordingly */
}

.text-box {
    position: absolute;
    top: 40%;
    left: 50%;

    /* -50 of the width, and height of this element, starting from the top left corner*/
    transform: translate(-50%, -50%);

    /*  button alignment with "display: inline-block"*/
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    /* animation specification */
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* animation style: starts with a faster timing, and then it ends with an slower timing*/
    /*
  animation-iteration-count: 3;
  animation-delay: 3s;
  */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /* animation shorthand, we can use this animation on any element and state "logo:hover" */
    animation: moveInRight 1s ease-out;

    /* remove shaking on our heading animation */
    backface-visibility: hidden;
}

/* a browser is optimized to animate the opacity and the transform property */
@keyframes moveInLeft {
    /* the porcetange is the time duraction */
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }

    /* bounce to the right */
    80% {
        transform: translateX(10px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    /* the porcetange is the time duraction */
    0% {
        opacity: 0;
        transform: translateX(100px);
    }

    /* bounce to the right */
    80% {
        transform: translateX(-10px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

/* pseudo class:  element selection on special conditions.
   we are going to add animations with pseudo classes. animations
   are relative to the initial state, take a look at .btn:hover hover and
   .btn:active classes
*/
.btn:link,
.btn:visited {
    text-transform: uppercase;

    /* remove text underline */
    text-decoration: none;

    /* y x padding shorthand */
    padding: 15px 14px;

    /* unlike block, inline-block wraps its content, and it does not occupy the whole width.
       This block is threated as it was a text box */
    display: inline-block;
    border-radius: 100px;
    /* effects are going to be applied to whatever property is changed on this element
    (or changes to  the initial state)*/
    transition: all .2s;
}

.btn:hover {
    transform: translateY(-3px);
    /* x y depth color (with black transparency) */
    box-shadow: 0 10px 20px rgba(0,0,0,0.2)
}

.btn:active {
    transform: translateY(1px);
    /* less blur and less shadow  */
    box-shadow: 0 5px 10px rgba(0,0,0,0.2)
}

.btn-white {
    background-color: #fff;
    color: #777;
}
