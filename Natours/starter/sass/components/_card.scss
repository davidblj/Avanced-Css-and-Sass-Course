
.card {

  // this rule adds the card rotating effect
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;

  // since we are not using floats, the height collapses.
  // we must set a height to the parent and its children
  height: 52rem;

  &__side {

    height: 52rem;
    transition: all .5s ease;

    // position one side on top of each other
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;

    // hide the back "part" of this element
    backface-visibility: hidden;
    border-radius: 3px;
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba($color-black, .15);

    &--front {
      background-color: $color-white;
    }

    // the back side, is flipped naturally
    &--back {
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark)
      }

      &-2 {
        background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark)
      }

      &-3 {
        background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark)
      }
    }

  }

  // when the card is hovered upon, apply an specific
  // style to one "side". Do rotate each side respectively

  &:hover &__side--front {
    transform: rotateY(-180deg);
  }

  &:hover &__side--back {
    transform: rotateY(0deg);
  }

  &__picture {

    background-size: cover;
    height: 23rem;

    // bend 2 backgrounds (the gradient, and the image). We can achieve something
    // similar wth just a linear gradient. this property do have some special effects
    // that a linear gradient does not
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100 0, 100% 85%, 0 100%);

    // the clip-path wont knowledge the border radious of its
    // parents even if we are using overflow: hidden. And so, we set this manually
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;

    &--1 {
      background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark),
      url(../img/nat-5.jpg);
    }

    &--2 {
      background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark),
      url(../img/nat-6.jpg);
    }

    &--3 {
      background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark),
      url(../img/nat-7.jpg);
    }
  }

  &__heading {

    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: $color-white;
    text-align: right;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  &__heading-span {

    padding: 1rem 1.5rem;

    // since this block is treated as a text block. the text wrapping wont
    // knowledge the padding, this property makes it do so.
    -webkit-box-decoration-break: clone;   // google chrome compatibility
    box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(to right bottom,
         rgba($color-secondary-light, .85),
         rgba($color-secondary-dark, .85));
    }

    &--2 {
      background-image: linear-gradient(to right bottom,
         rgba($color-primary-light, .85),
         rgba($color-primary-dark, .85));
    }

    &--3 {
      background-image: linear-gradient(to right bottom,
         rgba($color-tertiary-light, .85),
         rgba($color-tertiary-dark, .85));
    }
  }

  &__details {

    padding: 3rem;

    ul {

      list-style: none;
      width: 80%;
      margin: 0 auto;

      li {

        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {

          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  // why dont we use the utility text center on this rule sets ?
  &__cta {
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
  }

  &__price-box {
    text-align: center;
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }


  // this is an entire overhaul. This special case requires to rerwite every
  // style, because its easier
  @include respond(tab-port) {

    height: auto;
    border-radius: 3px;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, .15);

    &__side {

      height: auto;
      position: relative;
      transition: all .5s ease;
      box-shadow: none;

      &--back {
        transform: rotateY(0);
        clip-path: polygon(0 15%, 100%  0, 100% 100%, 0% 100%);
      }
    }

    &:hover &__side--front {
      transform: rotateY(0);
    }

    &:hover &__side--back {
      transform: rotateY(0);
    }

    &__cta {

      text-align: center;
      position: relative;
      top: 0;
      left: 0;
      transform: translate(0);
      padding: 7rem 4rem 4rem;
    }

    &__price-box {

      margin-bottom: 3rem;
    }

    &__price-value {

      font-size: 6rem;
      font-weight: 100;
    }

    &__details {

      ul {

        padding: 0;
      }
    }
  }
}
