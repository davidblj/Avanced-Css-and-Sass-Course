////////////////// LOGO

.logo {

  height: 3.25rem;
  margin-left: 2rem;
}

//////////////////

.search {

  flex: 0 0 40%;

  // flex item becomes a flex container
  display: flex;
  justify-content: center;
  align-items: center;

  // do put the search bar at the end of all components
  // and make it span the whole width so its wrapped into a new line
  @media only screen and (max-width: $bp-smallest) {

    order: 1;
    flex: 0 0 100%;
    background-color: var(--color-grey-light-2);
  }

  &__input {

    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all .2s;

    // negative margin allows the button to translap with this element
    margin-right: -3.5rem;

    &:focus {

      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    // safari and google place holder set up
    &::-webkit-input-placeholder {

      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // set the button background when the input is focused
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {

    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {

    height: 2rem;
    width: 2rem;

    // svg icon color
    fill: var(--color-grey-dark-3);
  }
}


////////////////// USER NAV

.user-nav {

  display: flex;
  flex-direction: row;
  align-items: center;
  align-self: stretch;

  // target the icon box and the user box
  & > * {

    padding: 0 2rem;
    cursor: pointer;

    // make the icon span the whole height of its parent, and set the
    // right hovering effect
    height: 100%;
    display: flex;
    align-items: center;
  }

  & > *:hover {

    background-color: var(--color-grey-light-2);
  }

  &__icon-box {

    position: relative;
  }

  &__icon {

    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {

    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 100px;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // flex works with text elements as well, this is how we center
    // the text inside the notification circle
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {

    height: 3.25rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

  &__user-name {

  }
}

////////////////// SIDE NAVIGATION

.side-nav {

  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {

    display: flex;
    margin: 0;
  }

  &__item {

    position: relative;

    &:not(:last-child) {

      margin-bottom: .5rem;

      @media only screen and (max-width: $bp-medium) {

        margin-bottom: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {

      flex-grow: 1;
      margin-bottom: 0;
    }
  }

  &__item::before {

    content: "";

    // 'before' and 'after' elements are displayed as child elements
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);

    // animation effect (transform-origin is by default centered)
    transform: scaleY(0);

    // property, time, cubic, delay
    transition: transform .2s,
                width .4s cubic-bezier(1,0,0,1) .2s,
                background-color .1s;
  }

  // when this item is hovered upon or active, target its before element
  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  &__item:active::before {
    background: var(--color-primary-light);
  }

  // target 'a' tags
  &__link:link,
  &__link:visited {

    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    display: flex;
    align-items: center;

    position: relative;     // z index only works with an specified "position" property
    z-index: 10;

    @media only screen and (max-width: $bp-medium) {

      padding: 2rem;
      justify-content: center;
    }

    @media only screen and (max-width: $bp-small) {

      flex-direction: column;
      padding: 1.5rem .5rem;
    }
  }

  &__icon {

    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;

    // inherit the color set on its parent; this property is dynamic
    // meaning that if the parent changes its color, so it does this node
    fill: currentColor;

    @media only screen and (max-width: $bp-small) {

      margin-right: 0;
      margin-bottom: .7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

////////////////// LEGAL TEXT

.legal {

  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-largest) {

    display: none;
  }
}

////////////////// GALLERY

.gallery {

  display: flex;

  &__photo {

    // flex will try to merge all of the 3 images inside a row. usually
    // 100% of width will spawn the whole vw without flex
    width: 100%;

    // avoid blank spaces under an image when its an inline element
    display: block;
  }
}

////////////////// OVERVIEW

.overview {

  display: flex;
  align-items: center;
  border-bottom: var(--line);

  &__heading {

    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {

      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {

    // margin 'auto' makes this element to push the remaining content to
    // its right, and in no need to componentize further the overview sections
    // into 2 blocks

    margin-right: auto;

    // svgs items behave pretty much like text nodes, by setting the parent
    // as a display flex element, the margin that usually a text node has (the
    // line height), is gone, and so, the stars are aligned across the  cross axis
    display: flex;
  }

  &__icon-star,
  &__icon-location {

    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {

    font-size: 1.2rem;
    display: flex;
    vertical-align: center;
  }

  &__icon-location {

    margin-right: .5rem;
  }

  &__rating {

    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;

    align-self: stretch;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-largest) {

      padding: 0 1.5rem;
    }
  }

  &__rating-average {

    font-size: 2.25rem;
    font-weight: 300;

    // use a negative margin to decrease the space between this element
    // and the rating count
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {

      font-size: 1.8rem;
    }
  }

  &__rating-count {

    font-size: .8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {

      font-size: .5rem;
    }
  }
}

////////////////// BUTTON inline

.btn-inline {

  border: none;
  color: var(--color-primary);

  // setting up the font size like this, make this component reusable
  // the same thing goes for this element current background color
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all .2s;

  & span {

    margin-left: 3px;
    transition: margin-left .2s;
  }

  &:hover {
    // the border bottom is automatically changed when a new color is set
    color: var(--color-grey-dark-1);

    & span {
      margin-left: 8px;
    }
  }

  &:focus {

    outline: none;
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {

  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

////////////////// PARAGRAPH

// select every paragraph element, but not the last on - on this container
.paragraph:not(:last-of-type) {

  margin-bottom: 2rem;
}

////////////////// LIST

.list {

  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;

  // if we dont set this property, all of the list items will try to fit
  // in just one line, even if the flex basis is set to 50%, the content
  // will overflow the parent container
  flex-wrap: wrap;

  &__item {

    // occupy the 50% of the parent width
    flex: 0 0 50%;
    margin-bottom: .7rem;
  }

  // icon set up
  &__item::before {

    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: .7rem;

    // old approach
    // background-image: url(../img/chevron-thin-right.svg);
    // background-size: cover;

    // new approach
    background-color: var(--color-primary);

    // the 'mask' is a property that allows to see 'through' an image, masks
    // are the only way to fill svgs with background colors.
    // note: property only available in webkit
    -webkit-mask-image: url(../img/chevron-thin-right.svg);
    -webkit-mask-size: cover;  // cover works quite diffrent here,
                               // to overflow its content through the parent
                               // as the content of this image will get clipped
                               // because it wont fit its parent container

    // fallback for browsers that supports this property without a webkit prefix
    mask-image: url(../img/chevron-thin-right.svg);
    mask-size: cover;
  }
}

////////////////// RECOMMEND

.recommend {

  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  align-items: center;
  justify-content: space-between;

  &__count {
  }

  &__friends {

    // by setting the photos container to flex, we guarantee
    // that each child will stay side by side, and never
    // break through a new line
    display: flex;
  }

  &__photo {

    // images shrink because the border box property makes the 'border'
    // to count in the total height of the object, we dont want that as
    // the image will look smaller, thats why we set it to its default value:
    // content-box
    box-sizing: content-box;

    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

////////////////// REVIEWS

.review {

  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {

    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {

    margin-bottom: 2rem;
    z-index: 10;
    position: relative;      // as a z-index requirement
  }

  &__user {

    display: flex;
    align-items: center;
  }

  &__photo {

    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {

    margin-right: auto;
  }

  &__user-name {

    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: .4rem;
  }

  &__user-date {

    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }

  &__rating  {

    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  // quotation mark build up, take crom: https://css-tricks.com/snippets/html/glyphs/
  &::before {

    content: "\201C";
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);

    // default browser sans serif font
    font-family: sans-serif;
    z-index: 1;
  }
}

////////////////// CALL TO ACTION

.cta {

  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0rem;
  }

  &__book-now {

    font-size: 1.2rem;
    font-weight: 200;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

.btn {

  font-size: 1.5rem;
  font-weight: uppercase;
  border-radius: 100px;
  border: none;
  color: #fff;
  position: relative;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark));
  overflow: hidden;
  cursor: pointer;

  & > * {

    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all .2s;
  }

  &__visible {

    padding: 2rem 7.5rem;
  }

  // this element is invisible because its parent has the property
  // overflow: hidden
  &__invisible {

    position: absolute;
    padding: 2rem 0;
    left: 0;

    // move up exactly the size of this element
    top: -100%;
  }

  &:hover {

    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark));
  }

  &:hover &__visible {

    transform: translateY(100%);
  }

  &:hover &__invisible {

    top: 0;
  }

  &:focus {
    outline: none;
  }
}
