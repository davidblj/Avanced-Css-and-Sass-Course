
.header {
  background-color: $color-grey-dark-1;

  // the header won't occupy the full width of this row, but only the first
  // 6 columns
  grid-column: full-start / col-end 6;
  background-image: linear-gradient(rgba($color-secondary, .93),
  rgba($color-secondary, .93)), url(../img/hero.jpeg);
  background-position: center;
  padding: 8rem;
  padding-top: 4rem;
  display: grid;

  // This grid is quite clever. This is how we produce
  // a similar effect as justify-content, but without
  // extra containers between the element 'sections'; The title and
  // button spans the remaining space making a 'center' like placement
  // layout.

  // take a look at the third row; when you shrink down the layout
  // a line break its going to happen, at that point, the row height its
  // going to be greater than 60 pixels, ands thats why set it to its
  // minimun content

  grid-template-rows: 1fr min-content minmax(min-content, 6rem) 1fr;

  // make the column width to vary from its maximun content (no line breaks), into its
  // minumun content (content with line breaks)
  grid-template-columns: minmax(min-content, max-content);
  grid-row-gap: 1.5rem;
  justify-content: center; // grid template column is quite unncessary
                           // (course mistake)

  &__logo {
    height: 3rem;
    justify-self: center;
  }

  &__btn {
    // note that this button positions itself under a '1fr' sized row
    // each element is by default streched in the x (align-self)
    // and y (justify-self) axis
    align-self: start;
    justify-self: start;
  }

  &__seen-on-text {
    display: grid;
    font-size: 1.6rem;
    color: $color-grey-light-2;
    // lines alignment into a single row
    grid-template-columns: 1fr max-content 1fr;
    grid-column-gap: 1.5rem;
    align-items: center;

    &::before,
    &::after {
      content: "";
      // do note that if we dont configure any grid columns, each one of this elemnts
      // will spawn an entire row, and take a look at how this elements behave
      // just like child elements would do. Why ?, because grids also
      // apply to text elements.
      height: 1px;
      display: block;
      background-color: currentColor;
    }
  }

  &__seen-on-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-column-start: 3rem;
    justify-items: center;

    img {
      // you must set a variable height, otherwise the grid wont be able to
      // chunk to its desired size
      max-height: 2.5rem;
      max-width: 100%;

      // dim the image
      filter: brightness(70%);
    }
  }
}
